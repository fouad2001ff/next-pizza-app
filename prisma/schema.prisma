// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String
  image         String?
  phone         String?
  streetAddress String?
  postalCode    String?
  city          String?
  country       String?
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  products      OrderProduct[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Product {
  id          String         @id @default(cuid())
  name        String
  description String
  basePrice   Float
  image       String
  order       Int            @default(autoincrement())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  sizes       Size[]
  extras      Extra[]
  orders      OrderProduct[]
  Category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
}

model Size {
  id    String       @id @default(cuid())
  name  productSizes
  price Float

  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Extra {
  id    String           @id @default(cuid())
  name  ExtraIngredients
  price Float

  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Category {
  id       String    @id @default(cuid())
  name     String
  order    Int       @default(autoincrement())
  products Product[]
}

model Order {
  id            String         @id @default(uuid())
  paid          Boolean        @default(false)
  subTotal      Float
  deliveryFee   Float
  totalPrice    Float
  userEmail     String
  phone         String
  streetAddress String
  postalCode    String
  city          String
  country       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  products      OrderProduct[]
}

model OrderProduct {
  id        String   @id @default(cuid())
  quantity  Int
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

enum productSizes {
  SMALL
  MEDIUM
  LARGE
}

enum ExtraIngredients {
  CHEESE
  TOMATO
  ONION
  PEPPER
  BACON
}

enum UserRole {
  USER
  ADMIN
}
